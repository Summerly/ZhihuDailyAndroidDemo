package com.example.pein.demo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.pein.demo.dao.NEWS;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS".
*/
public class NEWSDao extends AbstractDao<NEWS, Long> {

    public static final String TABLENAME = "NEWS";

    /**
     * Properties of entity NEWS.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NewsId = new Property(1, String.class, "newsId", false, "NEWS_ID");
        public final static Property Image = new Property(2, String.class, "image", false, "IMAGE");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property ImageSource = new Property(4, String.class, "imageSource", false, "IMAGE_SOURCE");
        public final static Property Body = new Property(5, String.class, "body", false, "BODY");
        public final static Property ShareURL = new Property(6, String.class, "shareURL", false, "SHARE_URL");
    };


    public NEWSDao(DaoConfig config) {
        super(config);
    }
    
    public NEWSDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NEWS_ID\" TEXT NOT NULL UNIQUE ," + // 1: newsId
                "\"IMAGE\" TEXT," + // 2: image
                "\"TITLE\" TEXT," + // 3: title
                "\"IMAGE_SOURCE\" TEXT," + // 4: imageSource
                "\"BODY\" TEXT," + // 5: body
                "\"SHARE_URL\" TEXT);"); // 6: shareURL
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NEWS entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getNewsId());
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(3, image);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String imageSource = entity.getImageSource();
        if (imageSource != null) {
            stmt.bindString(5, imageSource);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(6, body);
        }
 
        String shareURL = entity.getShareURL();
        if (shareURL != null) {
            stmt.bindString(7, shareURL);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NEWS readEntity(Cursor cursor, int offset) {
        NEWS entity = new NEWS( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // newsId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // image
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imageSource
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // body
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // shareURL
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NEWS entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNewsId(cursor.getString(offset + 1));
        entity.setImage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImageSource(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBody(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setShareURL(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(NEWS entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(NEWS entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
