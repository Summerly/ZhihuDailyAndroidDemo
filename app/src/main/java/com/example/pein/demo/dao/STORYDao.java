package com.example.pein.demo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.pein.demo.dao.STORY;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORY".
*/
public class STORYDao extends AbstractDao<STORY, Long> {

    public static final String TABLENAME = "STORY";

    /**
     * Properties of entity STORY.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StoryId = new Property(1, String.class, "storyId", false, "STORY_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Images = new Property(3, String.class, "images", false, "IMAGES");
        public final static Property TopStories = new Property(4, boolean.class, "topStories", false, "TOP_STORIES");
        public final static Property Date = new Property(5, String.class, "date", false, "DATE");
    };


    public STORYDao(DaoConfig config) {
        super(config);
    }
    
    public STORYDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STORY_ID\" TEXT," + // 1: storyId
                "\"TITLE\" TEXT NOT NULL ," + // 2: title
                "\"IMAGES\" TEXT," + // 3: images
                "\"TOP_STORIES\" INTEGER NOT NULL ," + // 4: topStories
                "\"DATE\" TEXT);"); // 5: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, STORY entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String storyId = entity.getStoryId();
        if (storyId != null) {
            stmt.bindString(2, storyId);
        }
        stmt.bindString(3, entity.getTitle());
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(4, images);
        }
        stmt.bindLong(5, entity.getTopStories() ? 1L: 0L);
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public STORY readEntity(Cursor cursor, int offset) {
        STORY entity = new STORY( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // storyId
            cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // images
            cursor.getShort(offset + 4) != 0, // topStories
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, STORY entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStoryId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.getString(offset + 2));
        entity.setImages(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTopStories(cursor.getShort(offset + 4) != 0);
        entity.setDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(STORY entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(STORY entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
